import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Random;
import java.util.Scanner;

class Main {
    public static final int totalCount = 9999999;

    public static void main(String[] arg) {
        Scanner scan = new Scanner(System.in);
        Random random = new Random();

        HashMap<String, HashMap> strategy = new HashMap<String,HashMap>();

        // default strategies
        strategy.put("gto", strategyGTO());

        String anotherStrategy = "y";
        String anotherRun = "y";
        while (anotherRun.equals("y")) {
            // strategy one wins, strategy two wins, ties
            int[] score = {0,0,0};

            while (anotherStrategy.equals("y")) {
                System.out.print("Strategy Name: ");
                String strategyName = scan.nextLine();

                strategy.put(strategyName, setupStrategy());

                System.out.print("\nAdd another Strategy? (y/n) ");
                anotherStrategy = scan.nextLine();
                System.out.println();
            }

            printValidStrategies(strategy);
            System.out.print("\nSelect Strategy One: ");
            String strategyOneName = scan.nextLine();
            System.out.print("Select Strategy Two: ");
            String strategyTwoName = scan.nextLine();


            HashMap<Choice, Integer> strategyOne = strategy.get(strategyOneName);
            HashMap<Choice, Integer> strategyTwo = strategy.get(strategyTwoName);

            for (int i = 0; i < totalCount; i++) {
                int strategyOneRNG = random.nextInt(strategyOne.get(Choice.R) + strategyOne.get(Choice.P) + strategyOne.get(Choice.S)) + 1;
                int strategyTwoRNG = random.nextInt(strategyTwo.get(Choice.R) + strategyTwo.get(Choice.P) + strategyTwo.get(Choice.S)) + 1;

                Choice strategyOneChoice = strategyOneRNG <= strategyOne.get(Choice.R) ? Choice.R : (strategyOneRNG <= strategyOne.get(Choice.R) + strategyOne.get(Choice.P) ? Choice.P : Choice.S);
                Choice strategyTwoChoice = strategyTwoRNG <= strategyTwo.get(Choice.R) ? Choice.R : (strategyTwoRNG <= strategyTwo.get(Choice.R) + strategyTwo.get(Choice.P) ? Choice.P : Choice.S);

                switch (winner(strategyOneChoice, strategyTwoChoice)) {
                    case "strategy one":
                        score[0]++;
                        break;
                    case "strategy two":
                        score[1]++;
                        break;
                    case "tie":
                        score[2]++;
                        break;
                    default:
                }
            }

            String strategyOneWinPercentage = new DecimalFormat("#.##").format((double) score[0] / totalCount * 100);
            String strategyTwoWinPercentage = new DecimalFormat("#.##").format((double) score[1] / totalCount * 100);
            String tiePercentage = new DecimalFormat("#.##").format((double) score[2] / totalCount * 100);

            System.out.println("\nStrategy one wins: " + strategyOneWinPercentage + "%");
            System.out.println("Strategy two wins: " + strategyTwoWinPercentage + "%");
            System.out.println("Ties               " + tiePercentage + "%");

            System.out.print("\nAgain? (y/n) ");
            anotherRun = scan.nextLine();
            if (anotherRun.equals("n"))
                break;

            System.out.print("Add Another Strategy? (y/n) ");
            anotherStrategy = scan.nextLine();
            System.out.println();
        }
    }

    public static void printValidStrategies(HashMap<String, HashMap> strategy) {
        System.out.println("VALID STRATEGIES     RATIO");
        for (String strategyName : strategy.keySet()) {
            int excessWhiteSpace = 21 - strategyName.length();
            StringBuilder whiteSpaces = new StringBuilder();
            for (int i = 0; i < excessWhiteSpace; i++) {
                whiteSpaces.append(" ");
            }

            System.out.print(strategyName + whiteSpaces.toString() + strategy.get(strategyName) + "\n");
        }
    }

    public static HashMap setupStrategy() {
        Scanner scan = new Scanner(System.in);
        HashMap<Choice, Integer> humanPlayer = new HashMap<Choice, Integer>();

        System.out.print("Rock Ratio:    ");
        humanPlayer.put(Choice.R, scan.nextInt());
        System.out.print("Paper Ratio:   ");
        humanPlayer.put(Choice.P, scan.nextInt());
        System.out.print("Scissor Ratio: ");
        humanPlayer.put(Choice.S, scan.nextInt());

        return humanPlayer;
    }

    public static HashMap strategyGTO() {
        HashMap<Choice, Integer> gtoPlayer= new HashMap<Choice, Integer>();
        gtoPlayer.put(Choice.R, 1);
        gtoPlayer.put(Choice.P, 1);
        gtoPlayer.put(Choice.S, 1);
        return gtoPlayer;
    }

    public static String winner(Choice strategyOneChoice, Choice strategyTwoChoice) {
        if (strategyOneChoice.equals(strategyTwoChoice))
            return "tie";
        else if ((strategyOneChoice.equals(Choice.R) && strategyTwoChoice.equals(Choice.S)) ||
                (strategyOneChoice.equals(Choice.P) && strategyTwoChoice.equals(Choice.R)) ||
                (strategyOneChoice.equals(Choice.S) && strategyTwoChoice.equals(Choice.R)))
            return "strategy one";
        else
            return "strategy two";
    }
}